import numpy as np
from scipy.optimize import curve_fit

# Global Variables
bin_time = 0.1
r = 1.18
cap_lamb = 3.76 * (10**4)
bin_times = [
    0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2,
    2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5,
    3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1,
    5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6,
    6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2,
    8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7,
    9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11,
    11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3,
    12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6,
    13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9,
    15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16, 16.1, 16.2,
    16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17, 17.1, 17.2, 17.3, 17.4, 17.5,
    17.6, 17.7, 17.8, 17.9, 18, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8,
    18.9, 19, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20, 20.1,
    20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21, 21.1, 21.2, 21.3, 21.4,
    21.5, 21.6, 21.7, 21.8, 21.9, 22, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7,
    22.8, 22.9, 23, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24,
    24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25, 25.1, 25.2, 25.3,
    25.4, 25.5
]
data = [
    2130, 2098, 1959, 1924, 1766, 1781, 1633, 1595, 1522, 1472, 1426, 1307,
    1305, 1152, 1178, 1128, 1050, 1005, 939, 905, 880, 812, 853, 765, 746, 699,
    663, 642, 624, 582, 543, 565, 523, 500, 469, 468, 435, 432, 411, 410, 391,
    363, 310, 370, 285, 297, 271, 262, 270, 245, 241, 236, 239, 224, 200, 192,
    188, 190, 182, 177, 172, 151, 169, 146, 151, 134, 121, 132, 114, 120, 107,
    100, 91, 111, 86, 75, 100, 70, 84, 93, 72, 57, 74, 81, 58, 55, 50, 66, 61,
    51, 51, 55, 55, 49, 42, 40, 44, 37, 37, 31, 40, 35, 33, 41, 28, 37, 41, 27,
    33, 40, 33, 28, 40, 27, 16, 30, 21, 12, 19, 20, 27, 22, 31, 21, 22, 19, 12,
    10, 20, 25, 23, 15, 18, 26, 19, 23, 18, 16, 20, 14, 19, 19, 27, 13, 21, 22,
    17, 20, 11, 26, 10, 12, 12, 14, 19, 22, 18, 12, 19, 18, 25, 11, 17, 14, 15,
    20, 14, 11, 13, 11, 19, 11, 13, 12, 7, 16, 14, 21, 13, 17, 11, 14, 12, 13,
    15, 13, 17, 17, 16, 20, 18, 15, 17, 10, 17, 9, 18, 20, 16, 14, 13, 14, 10,
    19, 16, 20, 10, 12, 19, 9, 13, 13, 13, 17, 13, 13, 10, 18, 15, 14, 17, 8,
    9, 14, 15, 11, 20, 10, 16, 10, 17, 14, 2, 13, 11, 11, 11, 11, 12, 13, 12,
    15, 15, 21, 15, 15, 21, 11, 15, 10, 14
]


def expected_value(t, n_0, lil_lamb, b):
    derivative = (
        (-lil_lamb * r * np.exp(-lil_lamb * t)) +
        (-(lil_lamb + cap_lamb) * np.exp(-(lil_lamb + cap_lamb) * t))) / (1 +
                                                                          r)
    result = b - bin_time * n_0 * derivative
    return result


# Use the curve_fit algorithm to find the optimal parameters

observed_data = np.array(data)
time_data = np.array(bin_times)
init_params = np.array([1, 1, 1])
params, covariance = curve_fit(expected_value, time_data, observed_data,
                               init_params)

# Print the optimal parameters
print("params: ", params)

# Print the standard deviations
std_dev = np.sqrt(np.diag(covariance))
print("std dev: ", std_dev)

###########################################################################